<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net35-cf;net35</TargetFrameworks>
    <NoWarn>$(NoWarn);CS1591</NoWarn>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AssemblyName>NETStandard.WindowsCE</AssemblyName>
    <AssemblyOriginatorKeyFile>$(SolutionDir)tools/keypair.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <PublicSign Condition=" '$(OS)' != 'Windows_NT' ">true</PublicSign>
    <PackageId>NETStandard.WindowsCE</PackageId>
    <RootNamespace>System</RootNamespace>
    <LangVersion>8.0</LangVersion>
    <VersionPrefix>1.8.0</VersionPrefix>
    <InformationalVersion>$(Version)</InformationalVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <FileVersion>1.8.0.0</FileVersion>
    <Description>This library includes most of the APIs from the .NET Standard specification built on top of Windows CE platform.</Description>
    <Title>.NET Standard API for Windows CE</Title>
    <PackageTags>net35-cf;windowsce;wince;netstandard;backport</PackageTags>
    <AssemblyTitle>$(Title) ($(TargetFramework))</AssemblyTitle>
    <Product>$(Title)</Product>
    <PackageOutputPath>$(SolutionDir)artifacts</PackageOutputPath>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <Authors>Fabricio Godoy</Authors>
    <Company>Fabrício Godoy</Company>
    <Copyright>Copyright © Fabrício Godoy</Copyright>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'net35-cf'">
    <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>CompactFramework</TargetFrameworkProfile>
    <DefineConstants>NET35_CF;WindowsCE;FEATURE_PORTABLE_SPAN</DefineConstants>
    <DisableImplicitFrameworkReferences>True</DisableImplicitFrameworkReferences>
    <NoStdLib>True</NoStdLib>
    <NoConfig>true</NoConfig>
    <FileAlignment>512</FileAlignment>
    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
    <PlatformID>E2BECB1F-8C8C-41ba-B736-9BE7D946A398</PlatformID>
    <Optimize>False</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'net35'">
    <FrameworkPathOverride>C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5\Profile\Client</FrameworkPathOverride>
    <DisableImplicitFrameworkReferences>True</DisableImplicitFrameworkReferences>
    <DefineConstants>FEATURE_PORTABLE_SPAN</DefineConstants>
    <NoWarn>$(NoWarn);CS0436;CS0114</NoWarn>
  </PropertyGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net35-cf' ">
    <Reference Include="mscorlib, Version=3.5.0.0, Culture=neutral, PublicKeyToken=969db8053d3322ac" />
    <Reference Include="System, Version=3.5.0.0, Culture=neutral, PublicKeyToken=969db8053d3322ac" />
    <Reference Include="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=969db8053d3322ac" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net35' ">
    <Reference Include="mscorlib" />
    <Reference Include="System" />
    <Reference Include="System.Core" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Net.Compilers" Version="3.3.1">
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Support IL compilation -->
  <ItemGroup>
    <IL Include="**\*.il" Exclude="**\obj\**\*.il;**\bin\**\*.il" />
  </ItemGroup>
  <Target Name="ProcessILAfterCompile" AfterTargets="Compile">
    <CallTarget Targets="InitializeIL; CoreDecompile; CoreCompileIL" />
  </Target>
  <Target Name="InitializeIL">
    <PropertyGroup>
      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il', ' ')</ILFile>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res', ' ')</ILResourceFile>
    </PropertyGroup>
  </Target>
  <Target Name="CoreDecompile" Inputs="@(IntermediateAssembly)" Outputs="$(ILFile)" Condition=" Exists ( @(IntermediateAssembly) ) ">
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkSdkPath" />
    </GetFrameworkSdkPath>
    <PropertyGroup>
      <ILDasm>"$(FrameworkSdkPath)bin\ildasm.exe" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(FrameworkSdkPath)bin\NETFX 4.0 Tools\ildasm.exe' ) ">
      <ILDasm>"$(FrameworkSdkPath)bin\NETFX 4.0 Tools\ildasm.exe" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(FrameworkSdkPath)bin\NETFX 4.5.1 Tools\ildasm.exe' ) ">
      <ILDasm>"$(FrameworkSdkPath)bin\NETFX 4.5.1 Tools\ildasm.exe" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(FrameworkSdkPath)bin\NETFX 4.6 Tools\ildasm.exe' ) ">
      <ILDasm>"$(FrameworkSdkPath)bin\NETFX 4.6 Tools\ildasm.exe" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(FrameworkSdkPath)bin\NETFX 4.6.1 Tools\ildasm.exe' ) ">
      <ILDasm>"$(FrameworkSdkPath)bin\NETFX 4.6.1 Tools\ildasm.exe" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(FrameworkSdkPath)bin\NETFX 4.6.2 Tools\ildasm.exe' ) ">
      <ILDasm>"$(FrameworkSdkPath)bin\NETFX 4.6.2 Tools\ildasm.exe" /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <Exec Command="$(ILDasm)" />
    <ItemGroup>
      <FileWrites Include="$(ILFile)" />
      <FileWrites Include="$(ILResourceFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ILSource>$([System.IO.File]::ReadAllText($(ILFile)))</ILSource>
      <Replacement>// method ${method} forwardref removed for IL import</Replacement>
      <Pattern>\.method [^{}]+ cil managed forwardref[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
      <Pattern>\.method [^{}]+ cil managed[^\a]+"extern was not given a DllImport attribute"[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
    </PropertyGroup>
    <WriteLinesToFile File="$(ILFile)" Lines="$(ILSource)" Overwrite="true" />
    <PropertyGroup>
      <ILSource />
    </PropertyGroup>
    <Delete Files="@(IntermediateAssembly)" />
  </Target>
  <Target Name="CoreCompileIL" Inputs="@(IL)" Outputs="@(IntermediateAssembly)">
    <GetFrameworkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkPath" />
    </GetFrameworkPath>
    <PropertyGroup>
      <ILAsm>"$(FrameworkPath)\ilasm.exe" /nologo /quiet /output:@(IntermediateAssembly->'"%(FullPath)"', ' ')</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(FileAlignment)' != '' ">
      <ILAsm>$(ILAsm) /alignment=$(FileAlignment)</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(BaseAddress)' != '' ">
      <ILAsm>$(ILAsm) /base=$(BaseAddress)</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OutputType)' == 'Library' ">
      <ILAsm>$(ILAsm) /dll</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(DebugType)' == 'pdbonly' ">
      <ILAsm>$(ILAsm) /pdb</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(DebugType)' == 'full' ">
      <ILAsm>$(ILAsm) /debug</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Optimize)' == 'true' ">
      <ILAsm>$(ILAsm) /optimize</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Platform)' == 'x64' ">
      <ILAsm>$(ILAsm) /pe64 /x64</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Platform)' == 'Itanium' ">
      <ILAsm>$(ILAsm) /pe64 /itanium</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(AssemblyOriginatorKeyFile)' != '' ">
      <ILAsm>$(ILAsm) /key:"$(AssemblyOriginatorKeyFile)"</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(ILResourceFile)' ) ">
      <ILAsm>$(ILAsm) /resource:"$(ILResourceFile)"</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(ILFile)' ) ">
      <ILAsm>$(ILAsm) "$(ILFile)"</ILAsm>
    </PropertyGroup>
    <Exec Command="$(ILAsm) @(IL->'&quot;%(FullPath)&quot;', ' ')" />
    <ItemGroup>
      <FileWrites Include="@(IntermediateAssembly->'%(RootDir)%(Directory)DesignTimeResolveAssemblyReferencesInput.cache', ' ')" />
    </ItemGroup>
    <Touch Files="$(ILFile)" />
  </Target>

</Project>
